First 0xA4 bytes are the same 

803E6B20
0x00A4 s16 sceneId; //internal
0x00B0 void* //Scene File Start Address
0x00B8 VIEW Struct //0x168 bytes, see below
0x0220 camera_struct //Camera 1
0x0398 camera_struct //Camera 2, typically used for cutscenes (see 0x0790)
0x0510 camera_struct //Camera 3, used when Pierre dances
0x0688 camera_struct //Camera 4
0x0800 void*[4] // Active Camera Pointers. 0 is play camera, 1 is Cutscene Camera
0x0810 s16 //Camera Index Immediate
0x0812 s16 //Camera Index Delayed?
0x0814 s8 //Music Sequence (0x15 scene header)
0x0815 s8 //Nightime Sequence? (0x15 scene header)
0x0830 //Mesh Collision stats struct //start of struct
 00 = ptr to scene collision mesh
 04 = float[3] minimum x,y,z for scene bounding box
 10 = float[3] maximum? x,y,z for scene bounding box
 1C = int[3] x,y,z CollisionPoly lookup table length
 28 = float[3] x,y,z "unit size" factor? for CollisionPoly lookup table
 34 = float[3] x,y,z "inverse unit size" for CollisionPoly lookup table
 40 = ptr to CollisionPoly lookup table, variable length, 0x06 bytes per record. 
    //record struct
    /* 0x00 */ short floorsId;   //CollisionPolyLink table index
    /* 0x02 */ short wallsId;    //CollisionPolyLink table index
    /* 0x04 */ short ceilingsId; //CollisionPolyLink table index
 44 = short, Max Records in CollisionPolyLink table
 46 = short, Number of Records Reserved in 0x48 table
 48 = ptr, CollisionPolyLink table, 0x04 bytes per record
    //record struct
    /* 0x00 */ short polyId;
    /* 0x02 */ short next; //Next CollisionPolyLink table index
 4C = ptr, CollisionPoly has been tested table, 1 byte per record, one record per poly defined in the scene mesh
0x0880 //Struct, actor poly collision data
  00 = s8, unknown
0x0884 = Actor Mesh array, 50 elements, 0x64 bytes
  00 = ptr, Actor Instance
  04 = ptr, Collision Mesh
  08 = s16, ?
  10 = s16, ?
  14 = float[3] x,y,z scale 1
  20 = short[3] x,y,z rotation 1
  28 = float[3] x,y,z pos 1
  34 = float[3] x,y,z scale 2
  40 = short[3] x,y,z rotation 2
  48 = float[3] x,y,z pos 2
  54 = s16? //?
  56 = s16? //?
  58 = s16? //?
  5A = s16? //Largest Distance to ? 
0x1C0C (0x138C + 0x880) = u16[50] Stores whether Actor mesh is loaded
0x1C70 (0x13F0 + 0x880) ptr to CollisionPoly table (actor meshes)
0x1C74 (0x13F4 + 0x880) ptr to translated vertex array (actor meshes). 6 bytes per vertice
0x1C84 (0x1454 + 0x830) s32 //num elements of 0x04 byte struct, default value 0x3E8
0x1C88 (0x1458 + 0x830) s32 max elements of prev value, default value 0x3E8?
0x1C8C (0x145C + 0x830) s32 num elements of 0x04 byte struct
0x1C98 (0x1468 + 0x830) s32 //Collision Mesh memory cap?, value 0x23000
0x1C9C (0x146C + 0x830) s32? //unk
0x1CA0 //Actors (0x284 bytes)
  0x00 u8
  0x02 u8
  0x03 u8
  0x04 s8
  0x05 u8
  0x0B s8?
  0x0E u8 numActorsSpawned;
  0x0F u8
0x1CB0 //Actor Category Table
  struct[16?] (0x0C bytes)
    0x00 s32 num; actors
    0x04 Actor* first;
    0x08 s32
    
0x1E58 s32 // Scene Switch Flags (0x00)
0x1E5C s32 // Scene Switch Flags (0x20)
0x1E60 s32 // Scene Temporary Switch Flags (0x40)
0x1E64 s32 // Scene Temporary Switch Flags (0x60)
0x1E68 s32 // Scene Chest Flags
0x1E6C s32 // Scene Room Clear flags
0x1E74 s32 // Scene Collectible Flags (0x00)
0x1E78 s32 // Scene Temporary Collectible Flags (0x20)
0x1E7C s32 // Scene Temporary Collectible Flags (0x40)
0x1E80 s32 // Scene Temporary Collectible Flags (0x60)

0x1F24 //Cutscene Struct
  0x00 u8 //unknown
  0x04 void* cutscene; //pointer to cutscene
  0x08 u8 //Cutscene state (0 no cutscene, 1 entering, 2 playing, 3 ending)
  0x12 u16 cutsceneId; //scene header list index
0x1F74 void* cutsceneList; //value set by 0x17 scene header command
  
0x4908 //Dialoge Engine Struct
  0x0000 VIEW struct 
0x14A70 //Textbox Struct
  0x1D80 s32 messageOffset;
  0x1D84 s32 messageLength;
  0x1D9C u16 messageId;
  0x1DBC (0x11F24 +0x4908) char[] dialog
0x1698C //Text Id Table ptr
0x169E8 VIEW struct (Parameter Static, parameter static 0x348 bytes)
0x16D30 VIEW struct (kaleido scope?) //0x2D0 bytes
  0x1EC u16 ?
  0x1EE u16 ?
0x17D88 //Object Allocation Table
0x186E8 //Room Header 0x0A command data ptr
0x18708 //Room allocation table
0x18875 //Leave the scene if value = 0x14
0x1887A //Next Entrance Index
0x18884 struct //Simple body Collision Group AT 1
  0x00 s16 //elements in array to process this frame
  0x02 u16 //?
  0x04 ptr   //first element in array 
0x18950 struct //Simple body collision Group AC 2
  0x00 s32   //elements in array to process this frame
  0x04 ptr   //first element in array 
0x18A44 struct //Simple body collision Group OT 3
  0x00 s32   //elements in array to process this frame
  0x04 ptr   //first element in array
0x18B4C //0x50 bytes
0x18BF0 //0x258 bytes
    0x18BF8 //0x0C bytes
0x18E48 //0x0C bytes



mm scene flags:
0x00 Chest Flags
0x04 Switch Flags (0x00)
0x08 Switch Flags (0x20)
0x0C Room Clear Flags
0x10 Collectible Flags (0x00)


camera_struct (0x178 bytes)

//camera 2

s16 unk // 0xFF?

VIEW struct (0x168 bytes)

















