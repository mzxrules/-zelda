800907B8: LHU A1, 0x1352 (S3) ; a1 = checksum (from 8011b922)
800907BC: SH R0, 0x1352 (S3) ; 8011b922 = 0000
800907C0: OR V0, S3, R0 ; v0 = 8011A5D0 (start of save data)
800907C4: OR T0, R0, R0 ; t0 = 0
800907C8: OR V1, R0, R0 ; v1 = 0
800907CC: ADDIU S0, S0, 0x0002 ; s0 = s0 + 2
800907D0: ANDI S0, S0, 0xFFFF
800907D4: BNE S2, S0, 0x800907E0 ; branch if s0 = 0x20
800907D8: ADDIU V1, V1, 0x0001 ; v1 = v1 + 1
800907DC: OR S0, R0, R0 ; s0 = 0
800907E0: LHU T9, 0x0000 (V0) ; t9 = 2 bytes from v0 (save area)
800907E4: ANDI V1, V1, 0xFFFF
800907E8: SLTIU AT, V1, 0x09AA ; at = 0 if v1 > 0x09aa
800907EC: ADDIU S1, S1, 0x0002 ; s1 = s1 + 2
800907F0: ADDU T0, T0, T9 ; t0 = t0 + t9
800907F4: ANDI S1, S1, 0xFFFF
800907F8: ANDI T0, T0, 0xFFFF
800907FC: BNEZ AT, 0x800907CC ; branch if v1 < 0x09aa
80090800: ADDIU V0, V0, 0x0002 ; v0 = v0 + 2
80090804: BEQ A1, T0, 0x8009096C ; branch if a1 (checksum) = t0 (calculated checksum)

8009082C: LHU A1, 0x1352 (S3)
80090830: SH R0, 0x1352 (S3)
80090834: OR V0, S3, R0
80090838: OR T0, R0, R0
8009083C: OR V1, R0, R0
80090840: ADDIU S0, S0, 0x0002
80090844: ANDI S0, S0, 0xFFFF
80090848: BNE S2, S0, 0x80090854
8009084C: ADDIU V1, V1, 0x0001
80090850: OR S0, R0, R0
80090854: LHU T3, 0x0000 (V0)
80090858: ANDI V1, V1, 0xFFFF
8009085C: SLTIU AT, V1, 0x09AA
80090860: ADDIU S1, S1, 0x0002
80090864: ADDU T0, T0, T3
80090868: ANDI S1, S1, 0xFFFF
8009086C: ANDI T0, T0, 0xFFFF
80090870: BNEZ AT, 0x80090840
80090874: ADDIU V0, V0, 0x0002
80090878: BEQ A1, T0, 0x80090950